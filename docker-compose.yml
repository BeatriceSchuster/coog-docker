version: '3.5'

networks:
  frontend:
    driver: bridge
    name: ${NETWORK_FRONTEND_NAME}
    ipam:
      config:
      - subnet:  ${NETWORK_FRONTEND_SUBNET}
  backend:
    name: ${NETWORK_BACKEND_NAME}
    ipam:
      config:
      - subnet:  ${NETWORK_BACKEND_SUBNET}

services:
  reverse-proxy:
    image: traefik:2.3.4
    ports:
      - 80:80
      - 443:443
      - 8080:8080
    restart: always
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./certs:/etc/certs:rw
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - ./traefik/traefik.toml:/etc/traefik/traefik.toml:ro
      - ./traefik/traefik.config.toml:/etc/traefik/traefik.config.toml:ro
      - ./traefik/acme.json:/acme.json:rw
    networks:
      - backend
      - frontend

  flower:
    image: mher/flower:0.9.5
    command: [" --url_prefix=flower"]
    user: "1003:1003"
    depends_on:
      - reverse-proxy
      - celery
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/1
      - FLOWER_URL_PREFIX=flower
    labels:
      - traefik.enable=true
      - traefik.http.routers.flower.rule=Host(`${COOG_HOSTNAME}`) && PathPrefix(`/flower`)
      - traefik.http.routers.flower.entrypoints=http
      - traefik.http.routers.flower_s.rule=Host(`${COOG_HOSTNAME}`) && PathPrefix(`/flower`)
      - traefik.http.routers.flower_s.entrypoints=https
      - traefik.http.routers.flower_s.tls=true
    networks:
      - backend
      - frontend
    restart: always

  coog:
    image: ${IMAGE_REGISTRY}/coog:${IMAGE_VERSION_COOG}
    command: ["server", "1"]
    env_file:
      - env_files/var.env
    depends_on:
      - initcoog
    labels:
      - traefik.enable=true
      - traefik.http.routers.coog.rule=Host(`${COOG_HOSTNAME}`)
      - traefik.http.routers.coog.entrypoints=http
      - traefik.http.routers.coog_s.rule=Host(`${COOG_HOSTNAME}`)
      - traefik.http.routers.coog_s.entrypoints=https
      - traefik.http.routers.coog_s.tls=true
    restart: always
    volumes:
      - ${COOG_TMP}:/workspace/tmp
      - ${COOG_VOLUME}:/workspace/io
      - ./conf/coog.conf:/workspace/coog.conf:ro
      - ./conf/batch.conf:/workspace/batch.conf:ro
    networks:
      - backend 

  initcoog:
    image: ${IMAGE_REGISTRY}/coog:${IMAGE_VERSION_COOG}
    command: ["admin", "-cu", "ir", "res", "-d", "${COOG_DB_NAME}"]
    env_file:
      - env_files/var.env
    networks:
      - backend
    restart: on-failure
    volumes:
      - ${COOG_VOLUME}:/workspace/io
      - ./conf/coog.conf:/workspace/coog.conf:ro
      - ./conf/batch.conf:/workspace/batch.conf:ro

  celery:
    image: ${IMAGE_REGISTRY}/coog:${IMAGE_VERSION_COOG}
    command: ["celery", "1"]
    env_file:
      - env_files/var.env
      - env_files/celery.env
    networks:
      - backend
    restart: always
    volumes:
      - ${COOG_VOLUME}:/workspace/io
      - ./conf/coog.conf:/workspace/coog.conf:ro
      - ./conf/batch.conf:/workspace/batch.conf:ro

  celery_single:
    image: ${IMAGE_REGISTRY}/coog:${IMAGE_VERSION_COOG}
    command: ["celery_single"]
    env_file:
      - env_files/var.env
      - env_files/celery_single.env
    networks:
      - backend
    restart: always
    volumes:
      - ${COOG_VOLUME}:/workspace/io
      - ./conf/coog.conf:/workspace/coog.conf:ro
      - ./conf/batch.conf:/workspace/batch.conf:ro

  postgres:
    image: postgres:12-alpine
    env_file:
      - env_files/postgres.env
    volumes:
      - ${POSTGRES_DATA_VOLUME}:/var/lib/postgresql/data
      #- ./postgres/init-user-db.sh:/docker-entrypoint-initdb.d/1_init-user-db.sh
      - ./postgres/dumps/${POSTGRES_DUMP}:/docker-entrypoint-initdb.d/2_coog.dump:ro
    restart: always
    networks:
      - backend

  redis:
    image: redis:5.0.7-alpine
    env_file:
      - env_files/redis.env
    restart: always
    command:
      - redis-server
      - /usr/local/etc/redis/redis.conf
    volumes:
      - ./conf/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - backend

  rabbitmq:
    image: rabbitmq:alpine
    env_file:
      - env_files/rabbitmq.env
    restart: always
    networks:
      - backend

  mongo:
    image: mongo
    env_file:
      - env_files/var.env
    restart: always
    volumes:
      - ${MONGODB_DATA_VOLUME}:/data/db
      - ./mongo/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - backend

  gateway:
    image: ${IMAGE_REGISTRY}/gateway:${IMAGE_VERSION_GATEWAY}
    env_file:
      - env_files/var.env
    depends_on:
      - mongo
    labels:
      - traefik.enable=true
      - traefik.http.routers.gateway.rule=Host(`${COOG_HOSTNAME}`) && PathPrefix(`/gateway`)
      - traefik.http.routers.gateway.entrypoints=http
      - traefik.http.routers.gateway.middlewares=gateway
      - traefik.http.middlewares.gateway.replacepathregex.regex=/gateway(/|$$)(.*)
      - traefik.http.middlewares.gateway.replacepathregex.replacement=/$${2}
      - traefik.http.routers.gateway_s.rule=Host(`${COOG_HOSTNAME}`) && PathPrefix(`/gateway`)
      - traefik.http.routers.gateway_s.middlewares=gateway_s
      - traefik.http.middlewares.gateway_s.replacepathregex.regex=/gateway(/|$$)(.*)
      - traefik.http.middlewares.gateway_s.replacepathregex.replacement=/$${2}
      - traefik.http.routers.gateway_s.entrypoints=https
      - traefik.http.routers.gateway_s.tls=true
    restart: always
    networks:
      - backend
      - frontend

  api:
    image: ${IMAGE_REGISTRY}/api:${IMAGE_VERSION_API}
    env_file:
      - env_files/var.env
    depends_on:
      - mongo
    restart: always
    networks:
      - backend

  api-b2b-config:
    image: ${IMAGE_REGISTRY}/api-b2b-config:${IMAGE_VERSION_API_B2B_CONFIG}
    env_file:
      - env_files/var.env
    depends_on:
      - mongo
    restart: always
    networks:
      - backend

  api-referential:
    image: ${IMAGE_REGISTRY}/api-referential:${IMAGE_VERSION_API_REFERENTIAL}
    env_file:
      - env_files/var.env
    depends_on:
      - mongo
    restart: always
    networks:
      - backend

  api-identity-manager:
    image: ${IMAGE_REGISTRY}/api-identity-manager:${IMAGE_VERSION_API_IDENTITY_MANAGER}
    env_file:
      - env_files/var.env
    depends_on:
      - mongo
      - api
    restart: always
    networks:
      - backend

  # app-b2c:
  #   image: ${IMAGE_REGISTRY}/app-b2c:${IMAGE_VERSION_APP_B2C}
  #   env_file:
  #     - env_files/var.env
  #   depends_on:
  #     - mongo
  #     - api
  #   networks:
  #     - backend

  web:
    image: ${IMAGE_REGISTRY}/web:${IMAGE_VERSION_WEB}
    env_file:
      - env_files/var.env
    command: ["server", "1"]
    depends_on:
      - redis
    restart: always
    networks:
      - backend

  portal:
    image: ${IMAGE_REGISTRY}/portal:${IMAGE_VERSION_PORTAL}
    command: ["server", "1"]
    env_file:
      - env_files/var.env
    labels:
      - traefik.enable=true
      - traefik.http.routers.portal.rule=Host(`${COOG_HOSTNAME}`) && PathPrefix(`/portal`)
      - traefik.http.routers.portal.entrypoints=http
      - traefik.http.routers.portal.middlewares=portal
      - traefik.http.middlewares.portal.replacepathregex.regex=/portal(/|$$)(.*)
      - traefik.http.middlewares.portal.replacepathregex.replacement=/$${2}
      - traefik.http.routers.portal_s.rule=Host(`${COOG_HOSTNAME}`) && PathPrefix(`/portal`)
      - traefik.http.routers.portal_s.middlewares=portal_s
      - traefik.http.middlewares.portal_s.replacepathregex.regex=/portal(/|$$)(.*)
      - traefik.http.middlewares.portal_s.replacepathregex.replacement=/$${2}
      - traefik.http.routers.portal_s.entrypoints=https
      - traefik.http.routers.portal_s.tls=true
    restart: always
    networks:
      - frontend

  static:
    image: ${IMAGE_REGISTRY}/static:${IMAGE_VERSION_STATIC}
    labels:
      - traefik.enable=true
      - traefik.http.routers.static.rule=Host(`${COOG_HOSTNAME}`) && ( PathPrefix(`/sao`) || PathPrefix(`/doc`) || PathPrefix(`/bench`) )
      - traefik.http.routers.static.entrypoints=http
      - traefik.http.routers.static_s.rule=Host(`${COOG_HOSTNAME}`) && ( PathPrefix(`/sao`) || PathPrefix(`/doc`) || PathPrefix(`/bench`) )
      - traefik.http.routers.static_s.entrypoints=https
      - traefik.http.routers.static_s.tls=true
    restart: always
    networks:
      - frontend

  unoconv:
    image: ${IMAGE_REGISTRY}/unoconv:${IMAGE_VERSION_UNOCONV}
    env_file:
      - env_files/var.env
    restart: always
    networks:
      - backend
